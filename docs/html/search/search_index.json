{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Description Framework for adding tasks & quests to Luanti (Minetest) . Index Functions Tables Links ContentDB Codeberg GitHub forum","title":"Home"},{"location":"#description","text":"Framework for adding tasks & quests to Luanti (Minetest) .","title":"Description"},{"location":"#index","text":"Functions Tables","title":"Index"},{"location":"#links","text":"ContentDB Codeberg GitHub forum","title":"Links"},{"location":"functions/","text":"Task Registration tasks.register tasks.register(id, def) Description: Registers a new task/quest. Parameters: id: (string) Task identifier. def: ( TaskDef ) Task definition table. tasks.get_definition tasks.get_definition(id) Description: Retrieves a task definition. Parameters: id: (string) Task identifier. Returns: TaskDef or nil . tasks.get_title tasks.get_title(id) Description: Retrieves human readable title. Parameters: id: (string) Task identifier. Returns: Task title string or nil if id not registered. Player States tasks.get_player_tasks tasks.get_player_tasks(player) Description: Retrieves all player's tasks. Parameters: player: ( ObjectRef ) Player reference. Returns: (table) Player's task states indexed by ID. tasks.set_player_state tasks.set_player_state(player, id[, index][, value]) Description: Sets task state with ID id for player to value . Parameters: player: ( ObjectRef ) Player reference. id: (string) Task identifier. index: (int) (optional) Task state index to be updated. If nil or less than 1 then entire state string is updated. value: (string) (optional) New value for state index or entire state string. If nil then index is set to empty string or entire state is unset. tasks.get_player_state tasks.get_player_state(player, id[, index]) Description: Retrieves task state string from player meta info. Parameters: player: ( ObjectRef ) Player reference. id: (string) Task identifier. index: (int) (optional) Task state index. Returns: (string) String value of state index or entire state string if index is nil or less than 1. tasks.player_has tasks.player_has(player, id) Description: Checks if player has a task. Parameters: player: ( ObjectRef ) Player reference. id: (string) Task identifier. Returns: (boolean) true if id is found in player tasks. tasks.player_is_complete tasks.player_is_complete(player, id) Description: Checks if task state is considered complete. Wrapper for TaskDef:is_complete . Parameters: player: ( ObjectRef ) Player reference. id: (string) Task identifier. Returns: (boolean) true if task definition considers task completed by player.","title":"Functions"},{"location":"functions/#task-registration","text":"","title":"Task Registration"},{"location":"functions/#tasksregister","text":"tasks.register(id, def) Description: Registers a new task/quest. Parameters: id: (string) Task identifier. def: ( TaskDef ) Task definition table.","title":"tasks.register"},{"location":"functions/#tasksget_definition","text":"tasks.get_definition(id) Description: Retrieves a task definition. Parameters: id: (string) Task identifier. Returns: TaskDef or nil .","title":"tasks.get_definition"},{"location":"functions/#tasksget_title","text":"tasks.get_title(id) Description: Retrieves human readable title. Parameters: id: (string) Task identifier. Returns: Task title string or nil if id not registered.","title":"tasks.get_title"},{"location":"functions/#player-states","text":"","title":"Player States"},{"location":"functions/#tasksget_player_tasks","text":"tasks.get_player_tasks(player) Description: Retrieves all player's tasks. Parameters: player: ( ObjectRef ) Player reference. Returns: (table) Player's task states indexed by ID.","title":"tasks.get_player_tasks"},{"location":"functions/#tasksset_player_state","text":"tasks.set_player_state(player, id[, index][, value]) Description: Sets task state with ID id for player to value . Parameters: player: ( ObjectRef ) Player reference. id: (string) Task identifier. index: (int) (optional) Task state index to be updated. If nil or less than 1 then entire state string is updated. value: (string) (optional) New value for state index or entire state string. If nil then index is set to empty string or entire state is unset.","title":"tasks.set_player_state"},{"location":"functions/#tasksget_player_state","text":"tasks.get_player_state(player, id[, index]) Description: Retrieves task state string from player meta info. Parameters: player: ( ObjectRef ) Player reference. id: (string) Task identifier. index: (int) (optional) Task state index. Returns: (string) String value of state index or entire state string if index is nil or less than 1.","title":"tasks.get_player_state"},{"location":"functions/#tasksplayer_has","text":"tasks.player_has(player, id) Description: Checks if player has a task. Parameters: player: ( ObjectRef ) Player reference. id: (string) Task identifier. Returns: (boolean) true if id is found in player tasks.","title":"tasks.player_has"},{"location":"functions/#tasksplayer_is_complete","text":"tasks.player_is_complete(player, id) Description: Checks if task state is considered complete. Wrapper for TaskDef:is_complete . Parameters: player: ( ObjectRef ) Player reference. id: (string) Task identifier. Returns: (boolean) true if task definition considers task completed by player.","title":"tasks.player_is_complete"},{"location":"tables/","text":"Task Definition TaskDef Description: Task definition table. Fields: title: (string) Human readable name of task. is_complete: ( function ) (optional) Checks if player has completed task. on_complete: ( function ) (optional) Called to execute instructions when state is considered complete after call to tasks.set_state . get_log: ( function ) (optional) Retrieves list of task state descriptors. logic: ( function ) (optional) Called at every server step. Should NOT be called manually. Task Definition Functions TaskDef:is_complete TaskDef:is_complete(player) Description: Checks if player has completed task. Parameters: player: ( ObjectRef ) Player reference. Returns: (bool) true if the task is in a state which is considered to have been completed. TaskDef:on_complete TaskDef:on_compete(player) Description: Called to execute instructions when state is considered complete after call to tasks.set_state . Parameters: player: ( ObjectRef ) Player reference. TaskDef:get_log TaskDef:get_log(player) Description: Retrieves list of task state descriptors. Parameters: player: ( ObjectRef ) Player reference. Returns: List of state descriptors. TaskDef:logic TaskDef:logic() Description: Called at every server step. Should NOT be called manually.","title":"Tables"},{"location":"tables/#task-definition","text":"","title":"Task Definition"},{"location":"tables/#taskdef","text":"Description: Task definition table. Fields: title: (string) Human readable name of task. is_complete: ( function ) (optional) Checks if player has completed task. on_complete: ( function ) (optional) Called to execute instructions when state is considered complete after call to tasks.set_state . get_log: ( function ) (optional) Retrieves list of task state descriptors. logic: ( function ) (optional) Called at every server step. Should NOT be called manually.","title":"TaskDef"},{"location":"tables/#task-definition-functions","text":"","title":"Task Definition Functions"},{"location":"tables/#taskdefis_complete","text":"TaskDef:is_complete(player) Description: Checks if player has completed task. Parameters: player: ( ObjectRef ) Player reference. Returns: (bool) true if the task is in a state which is considered to have been completed.","title":"TaskDef:is_complete"},{"location":"tables/#taskdefon_complete","text":"TaskDef:on_compete(player) Description: Called to execute instructions when state is considered complete after call to tasks.set_state . Parameters: player: ( ObjectRef ) Player reference.","title":"TaskDef:on_complete"},{"location":"tables/#taskdefget_log","text":"TaskDef:get_log(player) Description: Retrieves list of task state descriptors. Parameters: player: ( ObjectRef ) Player reference. Returns: List of state descriptors.","title":"TaskDef:get_log"},{"location":"tables/#taskdeflogic","text":"TaskDef:logic() Description: Called at every server step. Should NOT be called manually.","title":"TaskDef:logic"}]}