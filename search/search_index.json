{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Description Framework for adding tasks & quests to Luanti (Minetest) . Index Functions Tables Usage Examples Links ContentDB Codeberg GitHub forum","title":"Home"},{"location":"#description","text":"Framework for adding tasks & quests to Luanti (Minetest) .","title":"Description"},{"location":"#index","text":"Functions Tables Usage Examples","title":"Index"},{"location":"#links","text":"ContentDB Codeberg GitHub forum","title":"Links"},{"location":"examples/","text":"State Values Setting & Getting State State values are stored in player meta as a single string with indexes delimited by semicolons (;). Example: Setting & getting player task state. local player = core.get_player_by_name(name) local task_id = \"my_task\" -- set entire state string tasks.set_player_state(player, task_id, \"value1;value2\") -- print entire state string print(tasks.get_player_state(player, task_id)) -- result: \"value1;value2\" -- set third index of state string tasks.set_player_state(player, task_id, 3, \"value3\") -- print entire state string print(tasks.get_player_state(player, task_id)) -- result: \"value1;value2;value3\" -- print third index of state string print(tasks.get_player_state(player, task_id, 3)) -- result: \"value3\" Task Registration Task Definition See task definition table . Example: Creating a task definition. local task_def = { title = \"My Task\", description = \"Walk 200 nodes\", meta = { req_steps = 200 }, is_complete = function(self, player) -- task is \"complete\" if player walked the number of nodes designated in `TaskDef.meta.req_steps` return (tonumber(tasks.get_player_state(player, self.id, 1)) or 0) >= self.meta.req_steps end, on_complete = function(self, player) -- play a sound to notify player task complete core.sound_play({name=\"mymod_mysound\"}, {to_player=player:get_player_name()) end, get_log = function(self, player) local desc = {} if self:is_complete(player) then table.insert(desc, \"I have completed the task.\") else table.insert(desc, \"I have not yet walked far enough.\") end -- index 1 represents number of steps player has taken since task began local steps = tonumber(tasks.get_player_state(player, self.id, 1)) or 0 table.insert(desc, \"I have taken \" .. steps .. \" out of \" .. self.meta.req_steps .. \" steps.\") return desc end } Registering Definition To register a task definition simply use the tasks.register function. Example: tasks.register(\"step_200_nodes\", task_def) Implementing Logic The TaskDef:logic function can be used to execute instructions at each server step. If it is defined at time of registration it will be registered for execution with core.register_globalstep . It is executed for each player that has the task and is not considered completed. Example: task_def.logic = function(self, dtime, player) local pos = player:getpos() pos = {x=math.floor(pos.x), y=math.floor(pos.x)} -- index 2 represents player's position at previous call local old_pos = core.deserialize(tasks.get_player_state(player, self.id, 2)) or pos local steps_taken = math.abs(pos.x - old_pos.x) + math.abs(pos.y - old_pos.y) -- FIXME: compensate for teleporting if steps_taken > 0 then -- index 1 represents number of steps player has taken since task began local total_steps = (tonumber(tasks.get_player_state(player, self.id, 1)) or 0) + steps_taken if total_steps > self.meta.req_steps then total_steps = self.meta.req_steps end -- set new position first as setting steps count may trigger `TaskDef:on_complete` tasks.set_player_state(player, self.id, 2, core.serialize(pos)) tasks.set_player_state(player, self.id, 1, total_steps) end end","title":"Examples"},{"location":"examples/#state-values","text":"","title":"State Values"},{"location":"examples/#setting-getting-state","text":"State values are stored in player meta as a single string with indexes delimited by semicolons (;). Example: Setting & getting player task state. local player = core.get_player_by_name(name) local task_id = \"my_task\" -- set entire state string tasks.set_player_state(player, task_id, \"value1;value2\") -- print entire state string print(tasks.get_player_state(player, task_id)) -- result: \"value1;value2\" -- set third index of state string tasks.set_player_state(player, task_id, 3, \"value3\") -- print entire state string print(tasks.get_player_state(player, task_id)) -- result: \"value1;value2;value3\" -- print third index of state string print(tasks.get_player_state(player, task_id, 3)) -- result: \"value3\"","title":"Setting &amp; Getting State"},{"location":"examples/#task-registration","text":"","title":"Task Registration"},{"location":"examples/#task-definition","text":"See task definition table . Example: Creating a task definition. local task_def = { title = \"My Task\", description = \"Walk 200 nodes\", meta = { req_steps = 200 }, is_complete = function(self, player) -- task is \"complete\" if player walked the number of nodes designated in `TaskDef.meta.req_steps` return (tonumber(tasks.get_player_state(player, self.id, 1)) or 0) >= self.meta.req_steps end, on_complete = function(self, player) -- play a sound to notify player task complete core.sound_play({name=\"mymod_mysound\"}, {to_player=player:get_player_name()) end, get_log = function(self, player) local desc = {} if self:is_complete(player) then table.insert(desc, \"I have completed the task.\") else table.insert(desc, \"I have not yet walked far enough.\") end -- index 1 represents number of steps player has taken since task began local steps = tonumber(tasks.get_player_state(player, self.id, 1)) or 0 table.insert(desc, \"I have taken \" .. steps .. \" out of \" .. self.meta.req_steps .. \" steps.\") return desc end }","title":"Task Definition"},{"location":"examples/#registering-definition","text":"To register a task definition simply use the tasks.register function. Example: tasks.register(\"step_200_nodes\", task_def)","title":"Registering Definition"},{"location":"examples/#implementing-logic","text":"The TaskDef:logic function can be used to execute instructions at each server step. If it is defined at time of registration it will be registered for execution with core.register_globalstep . It is executed for each player that has the task and is not considered completed. Example: task_def.logic = function(self, dtime, player) local pos = player:getpos() pos = {x=math.floor(pos.x), y=math.floor(pos.x)} -- index 2 represents player's position at previous call local old_pos = core.deserialize(tasks.get_player_state(player, self.id, 2)) or pos local steps_taken = math.abs(pos.x - old_pos.x) + math.abs(pos.y - old_pos.y) -- FIXME: compensate for teleporting if steps_taken > 0 then -- index 1 represents number of steps player has taken since task began local total_steps = (tonumber(tasks.get_player_state(player, self.id, 1)) or 0) + steps_taken if total_steps > self.meta.req_steps then total_steps = self.meta.req_steps end -- set new position first as setting steps count may trigger `TaskDef:on_complete` tasks.set_player_state(player, self.id, 2, core.serialize(pos)) tasks.set_player_state(player, self.id, 1, total_steps) end end","title":"Implementing Logic"},{"location":"functions/","text":"Task Registration tasks.register tasks.register(id, def) Description: Registers a new task/quest. Parameters: id: (string) Task identifier. def: ( TaskDef ) Task definition table. tasks.get_registered tasks.get_registered Description: Retrieves list of registered task IDs. Returns: (table) Registered task IDs. tasks.get_definition tasks.get_definition(id) Description: Retrieves a task definition. Parameters: id: (string) Task identifier. Returns: TaskDef or nil . tasks.get_title tasks.get_title(id) Description: Retrieves human readable title. Parameters: id: (string) Task identifier. Returns: Task title string or nil if id not registered. tasks.get_description tasks.get_description(id) Description: Retrieves task description. Parameters: id: (string) Task identifier. Returns: Task description string or nil if id not registered. Player States tasks.get_player_tasks tasks.get_player_tasks(player) Description: Retrieves all player's tasks. Parameters: player: ( ObjectRef ) Player reference. Returns: (table) Player's task states indexed by ID. tasks.set_player_state tasks.set_player_state(player, id[, index][, value]) Description: Sets task state with ID id for player to value . Parameters: player: ( ObjectRef ) Player reference. id: (string) Task identifier. index: (int) (optional) Task state index to be updated. If nil or less than 1 then entire state string is updated. value: (any) (optional) New value (converted to string) for state index or entire state string. If nil then index is set to empty string or entire state is unset. tasks.get_player_state tasks.get_player_state(player, id[, index|list]) Description: Retrieves task state string from player meta info. Parameters: player: ( ObjectRef ) Player reference. id: (string) Task identifier. index: (int) (optional) Task state index. list: (boolean) (optional) Flag to return list instead of string for entire state. Returns: (string|table) String value of state index or entire state string if index is nil or less than 1. If table is true then a list of strings of entire state is returned. tasks.player_has tasks.player_has(player, id) Description: Checks if player has a task. Parameters: player: ( ObjectRef ) Player reference. id: (string) Task identifier. Returns: (boolean) true if id is found in player tasks. tasks.player_is_complete tasks.player_is_complete(player, id) Description: Checks if task state is considered complete. Wrapper for TaskDef:is_complete . Parameters: player: ( ObjectRef ) Player reference. id: (string) Task identifier. Returns: (boolean) true if task definition considers task completed by player. tasks.get_player_log tasks.get_player_log(player, id) Description: Retrieves task descriptors for displaying to player. Wrapper for TaskDef:get_log . Parameters: player: ( ObjectRef ) Player reference. id: (string) Task identifier. Returns: (table) List of string descriptors.","title":"Functions"},{"location":"functions/#task-registration","text":"","title":"Task Registration"},{"location":"functions/#tasksregister","text":"tasks.register(id, def) Description: Registers a new task/quest. Parameters: id: (string) Task identifier. def: ( TaskDef ) Task definition table.","title":"tasks.register"},{"location":"functions/#tasksget_registered","text":"tasks.get_registered Description: Retrieves list of registered task IDs. Returns: (table) Registered task IDs.","title":"tasks.get_registered"},{"location":"functions/#tasksget_definition","text":"tasks.get_definition(id) Description: Retrieves a task definition. Parameters: id: (string) Task identifier. Returns: TaskDef or nil .","title":"tasks.get_definition"},{"location":"functions/#tasksget_title","text":"tasks.get_title(id) Description: Retrieves human readable title. Parameters: id: (string) Task identifier. Returns: Task title string or nil if id not registered.","title":"tasks.get_title"},{"location":"functions/#tasksget_description","text":"tasks.get_description(id) Description: Retrieves task description. Parameters: id: (string) Task identifier. Returns: Task description string or nil if id not registered.","title":"tasks.get_description"},{"location":"functions/#player-states","text":"","title":"Player States"},{"location":"functions/#tasksget_player_tasks","text":"tasks.get_player_tasks(player) Description: Retrieves all player's tasks. Parameters: player: ( ObjectRef ) Player reference. Returns: (table) Player's task states indexed by ID.","title":"tasks.get_player_tasks"},{"location":"functions/#tasksset_player_state","text":"tasks.set_player_state(player, id[, index][, value]) Description: Sets task state with ID id for player to value . Parameters: player: ( ObjectRef ) Player reference. id: (string) Task identifier. index: (int) (optional) Task state index to be updated. If nil or less than 1 then entire state string is updated. value: (any) (optional) New value (converted to string) for state index or entire state string. If nil then index is set to empty string or entire state is unset.","title":"tasks.set_player_state"},{"location":"functions/#tasksget_player_state","text":"tasks.get_player_state(player, id[, index|list]) Description: Retrieves task state string from player meta info. Parameters: player: ( ObjectRef ) Player reference. id: (string) Task identifier. index: (int) (optional) Task state index. list: (boolean) (optional) Flag to return list instead of string for entire state. Returns: (string|table) String value of state index or entire state string if index is nil or less than 1. If table is true then a list of strings of entire state is returned.","title":"tasks.get_player_state"},{"location":"functions/#tasksplayer_has","text":"tasks.player_has(player, id) Description: Checks if player has a task. Parameters: player: ( ObjectRef ) Player reference. id: (string) Task identifier. Returns: (boolean) true if id is found in player tasks.","title":"tasks.player_has"},{"location":"functions/#tasksplayer_is_complete","text":"tasks.player_is_complete(player, id) Description: Checks if task state is considered complete. Wrapper for TaskDef:is_complete . Parameters: player: ( ObjectRef ) Player reference. id: (string) Task identifier. Returns: (boolean) true if task definition considers task completed by player.","title":"tasks.player_is_complete"},{"location":"functions/#tasksget_player_log","text":"tasks.get_player_log(player, id) Description: Retrieves task descriptors for displaying to player. Wrapper for TaskDef:get_log . Parameters: player: ( ObjectRef ) Player reference. id: (string) Task identifier. Returns: (table) List of string descriptors.","title":"tasks.get_player_log"},{"location":"tables/","text":"Task Definition TaskDef Description: Task definition table. Fields: title: (string) Human readable name of task. description: (string) Description of task. is_complete: ( function ) (optional) Checks if player has completed task. on_complete: ( function ) (optional) Called to execute instructions when state is considered complete after call to tasks.set_state . get_log: ( function ) (optional) Retrieves list of task state descriptors. logic: ( function ) (optional) Called at every server step. Should NOT be called manually. Task Definition Functions TaskDef:is_complete TaskDef:is_complete(player) Description: Checks if player has completed task. Parameters: player: ( ObjectRef ) Player reference. Returns: (bool) true if the task is in a state which is considered to have been completed. TaskDef:on_complete TaskDef:on_compete(player) Description: Called to execute instructions when state is considered complete after call to tasks.set_state . Parameters: player: ( ObjectRef ) Player reference. TaskDef:get_log TaskDef:get_log(player) Description: Retrieves list of task state descriptors. Parameters: player: ( ObjectRef ) Player reference. Returns: List of state descriptors. TaskDef:logic TaskDef:logic(dtime, player) Description: Called at every server step. Should NOT be called manually. Parameters: dtime: (int) Elapsed time since last call in seconds. player: ( ObjectRef ) Player reference.","title":"Tables"},{"location":"tables/#task-definition","text":"","title":"Task Definition"},{"location":"tables/#taskdef","text":"Description: Task definition table. Fields: title: (string) Human readable name of task. description: (string) Description of task. is_complete: ( function ) (optional) Checks if player has completed task. on_complete: ( function ) (optional) Called to execute instructions when state is considered complete after call to tasks.set_state . get_log: ( function ) (optional) Retrieves list of task state descriptors. logic: ( function ) (optional) Called at every server step. Should NOT be called manually.","title":"TaskDef"},{"location":"tables/#task-definition-functions","text":"","title":"Task Definition Functions"},{"location":"tables/#taskdefis_complete","text":"TaskDef:is_complete(player) Description: Checks if player has completed task. Parameters: player: ( ObjectRef ) Player reference. Returns: (bool) true if the task is in a state which is considered to have been completed.","title":"TaskDef:is_complete"},{"location":"tables/#taskdefon_complete","text":"TaskDef:on_compete(player) Description: Called to execute instructions when state is considered complete after call to tasks.set_state . Parameters: player: ( ObjectRef ) Player reference.","title":"TaskDef:on_complete"},{"location":"tables/#taskdefget_log","text":"TaskDef:get_log(player) Description: Retrieves list of task state descriptors. Parameters: player: ( ObjectRef ) Player reference. Returns: List of state descriptors.","title":"TaskDef:get_log"},{"location":"tables/#taskdeflogic","text":"TaskDef:logic(dtime, player) Description: Called at every server step. Should NOT be called manually. Parameters: dtime: (int) Elapsed time since last call in seconds. player: ( ObjectRef ) Player reference.","title":"TaskDef:logic"}]}